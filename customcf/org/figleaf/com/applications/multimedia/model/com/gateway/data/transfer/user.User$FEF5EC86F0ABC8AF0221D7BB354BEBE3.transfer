<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Constructor for Transfer class user.User" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true" hint="The Transfer library">
<cfargument name="utility" type="transfer.com.util.Utility" required="true" hint="The Utility object">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true" hint="The Nullable lookup object">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true" hint="What is determined to be the base 'this' object for this TransferObject">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setSystem(createObject("java", "java.lang.System"));
setNullable(arguments.nullable);
setClassName("user.User");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setIDUser(getNullable().getNullString(getClassName(), "IDUser"));
setLastLoggedIn(Now());
setLoaded(StructNew());
setPageisLoaded(true);
setMediaisLoaded(true);
setPageCollection(ArrayNew(1));
setPageIDCollection(StructNew());
setMediaCollection(ArrayNew(1));
setMediaIDCollection(StructNew());
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The TransferObject to test against">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getIDUser() eq arguments.transfer.getIDUser());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="getIDUser" access="public" returntype="string" default="string" hint="Accessor for property IDUser" output="false">
<cfscript>
return instance.IDUser;
</cfscript>
</cffunction>

<cffunction name="setIDUser" access="public" returntype="void" default="void" hint="Mutator for property IDUser" output="false">
<cfargument name="IDUser" type="string" required="true" hint="The value to set IDUser to">
<cfscript>
if(NOT StructKeyExists(instance, "IDUser") OR Compare(getIDUser(), arguments.IDUser) neq 0)
{
instance.IDUser = (arguments.IDUser);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getLastLoggedIn" access="public" returntype="date" default="date" hint="Accessor for property LastLoggedIn" output="false">
<cfscript>
return instance.LastLoggedIn;
</cfscript>
</cffunction>

<cffunction name="setLastLoggedIn" access="public" returntype="void" default="void" hint="Mutator for property LastLoggedIn" output="false">
<cfargument name="LastLoggedIn" type="date" required="true" hint="The value to set LastLoggedIn to">
<cfscript>
if(NOT StructKeyExists(instance, "LastLoggedIn") OR getLastLoggedIn() neq arguments.LastLoggedIn)
{
instance.LastLoggedIn = (arguments.LastLoggedIn);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getPageisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'Page' has been loaded yet" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "Page"))
{
setPageisLoaded(false);
}
return StructFind(getLoaded(), "Page");
</cfscript>
</cffunction>

<cffunction name="setPageisLoaded" access="private" returntype="void" default="void" hint="Set the loaded state of composition 'arguments.name'" output="false">
<cfargument name="loaded" type="boolean" required="true" hint="Whether or not this composition has been loaded">
<cfscript>
StructInsert(getLoaded(), "Page", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadPage" access="package" returntype="void" default="void" hint="Lazy load composition 'Page'" output="false">
<cfif NOT getPageisLoaded()>
<cflock name="transfer.load.user.User.Page.#getSystem().identityHashCode(this)#" timeout="60">
<cfif NOT getPageisLoaded()>
<cfscript>
getTransfer().loadOneToMany(getThisObject(), "Page");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="unLoadPage" access="private" returntype="void" default="void" hint="unload lazy load composition 'Page'" output="false">
<cfif getPageisLoaded()>
<cflock name="transfer.load.user.User.Page.#getSystem().identityHashCode(this)#" timeout="60">
<cfif getPageisLoaded()>
<cfscript>
setPageisLoaded(false);
emptyPage();
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="getMediaisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'Media' has been loaded yet" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "Media"))
{
setMediaisLoaded(false);
}
return StructFind(getLoaded(), "Media");
</cfscript>
</cffunction>

<cffunction name="setMediaisLoaded" access="private" returntype="void" default="void" hint="Set the loaded state of composition 'arguments.name'" output="false">
<cfargument name="loaded" type="boolean" required="true" hint="Whether or not this composition has been loaded">
<cfscript>
StructInsert(getLoaded(), "Media", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadMedia" access="package" returntype="void" default="void" hint="Lazy load composition 'Media'" output="false">
<cfif NOT getMediaisLoaded()>
<cflock name="transfer.load.user.User.Media.#getSystem().identityHashCode(this)#" timeout="60">
<cfif NOT getMediaisLoaded()>
<cfscript>
getTransfer().loadOneToMany(getThisObject(), "Media");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="unLoadMedia" access="private" returntype="void" default="void" hint="unload lazy load composition 'Media'" output="false">
<cfif getMediaisLoaded()>
<cflock name="transfer.load.user.User.Media.#getSystem().identityHashCode(this)#" timeout="60">
<cfif getMediaisLoaded()>
<cfscript>
setMediaisLoaded(false);
emptyMedia();
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="set the state of this object from a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setIDUser(StructFind(arguments.memento, "IDUser"));
}
setPropertyMemento(arguments.memento);
setPageisLoaded(false);
setMediaisLoaded(false);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="set the Property state of this object with a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
setLastLoggedIn(StructFind(arguments.memento, "LastLoggedIn"));
</cfscript>
</cffunction>

<cffunction name="setPageMemento" access="public" returntype="void" default="void" hint="set the state of composition onetomany 'Page'" output="false">
<cfargument name="memento" type="array" required="true" hint="the memento to set the state with">
<cfscript>
var isDirty = false;
var iterator = 0;
var collection = ArrayNew(1);
var idcollection = StructNew();
var counter = 0;
var len = 0;
var item = 0;
var composite = 0;
</cfscript>
<cflock name="transfer.user.User.Page.#getIDUser()#" timeout="60">
<cfscript>
len = ArrayLen(arguments.memento);
for(counter = 1; counter lte len; counter = counter + 1)
{
composite = arguments.memento[counter];
StructInsert(composite, "parentUser_transferObject", getThisObject(), true);
item = getComposite("page.Page", composite, "IDPage");
StructInsert(idcollection, "pk:" & item.getIDPage(), 1, true);
StructInsert(idcollection, "obj:" & getSystem().identityHashCode(item), 1, true);
arrayAppend(collection, item);
}
setPageIDCollection(idcollection);
setPageCollection(collection);
iterator = collection.iterator();
while(iterator.hasNext())
{
item = iterator.next();
isDirty = item.getIsDirty();
if(item.getIsLoaded())
{
item.setParentUser(getThisObject(), false, true);
}
if(NOT isDirty)
{
item.getOriginalTransferObject(true).setIsDirty(StructFind(composite, "transfer_isDirty"));
item.getOriginalTransferObject(true).setIsPersisted(StructFind(composite, "transfer_isPersisted"));
}
}
setPageisLoaded(true);
</cfscript>
</cflock>
</cffunction>

<cffunction name="setMediaMemento" access="public" returntype="void" default="void" hint="set the state of composition onetomany 'Media'" output="false">
<cfargument name="memento" type="array" required="true" hint="the memento to set the state with">
<cfscript>
var isDirty = false;
var iterator = 0;
var collection = ArrayNew(1);
var idcollection = StructNew();
var counter = 0;
var len = 0;
var item = 0;
var composite = 0;
</cfscript>
<cflock name="transfer.user.User.Media.#getIDUser()#" timeout="60">
<cfscript>
len = ArrayLen(arguments.memento);
for(counter = 1; counter lte len; counter = counter + 1)
{
composite = arguments.memento[counter];
StructInsert(composite, "parentUser_transferObject", getThisObject(), true);
item = getComposite("media.Media", composite, "IDMedia");
StructInsert(idcollection, "pk:" & item.getIDMedia(), 1, true);
StructInsert(idcollection, "obj:" & getSystem().identityHashCode(item), 1, true);
arrayAppend(collection, item);
}
setMediaIDCollection(idcollection);
setMediaCollection(collection);
iterator = collection.iterator();
while(iterator.hasNext())
{
item = iterator.next();
isDirty = item.getIsDirty();
if(item.getIsLoaded())
{
item.setParentUser(getThisObject(), false, true);
}
if(NOT isDirty)
{
item.getOriginalTransferObject(true).setIsDirty(StructFind(composite, "transfer_isDirty"));
item.getOriginalTransferObject(true).setIsPersisted(StructFind(composite, "transfer_isPersisted"));
}
}
setMediaisLoaded(true);
</cfscript>
</cflock>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
StructInsert(memento, "IDUser", getIDUser());
StructInsert(memento, "transfer_isDirty", getIsDirty());
StructInsert(memento, "transfer_isPersisted", getIsPersisted());
StructInsert(memento, "transfer_isProxied", false);
StructAppend(memento, getPropertyMemento());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
StructInsert(memento, "LastLoggedIn", getLastLoggedIn());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPageMemento" access="public" returntype="array" default="array" hint="returns the memento for the onetomany Page" output="false">
<cfscript>
var memento = createObject("java", "java.util.ArrayList").init();
var iterator = getPageIterator();
var item = 0;
while(iterator.hasNext())
{
item = iterator.next();
ArrayAppend(memento, item.getMemento());
}
return memento;
</cfscript>
</cffunction>

<cffunction name="getMediaMemento" access="public" returntype="array" default="array" hint="returns the memento for the onetomany Media" output="false">
<cfscript>
var memento = createObject("java", "java.util.ArrayList").init();
var iterator = getMediaIterator();
var item = 0;
while(iterator.hasNext())
{
item = iterator.next();
ArrayAppend(memento, item.getMemento());
}
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The object to copy values to">
<cfscript>
if(arguments.transfer.getClassName() neq "user.User")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'user.User'");
}
arguments.transfer.setMemento(getMemento());
if(getPageisLoaded())
{
arguments.transfer.setPageMemento(getPageMemento());
}
if(getMediaisLoaded())
{
arguments.transfer.setMediaMemento(getMediaMemento());
}
</cfscript>
</cffunction>

<cffunction name="getPageCollection" access="private" returntype="array" default="array" hint="Accessor for the internal collection for Page" output="false">
<cfscript>
return instance.Page;
</cfscript>
</cffunction>

<cffunction name="setPageCollection" access="private" returntype="void" default="void" hint="Mutator for the internal collection for Page" output="false">
<cfargument name="Page" type="array" required="true" hint="The array to set">
<cfscript>
instance.Page = arguments.Page;
</cfscript>
</cffunction>

<cffunction name="getPageIDCollection" access="private" returntype="struct" default="struct" hint="Accessor for internal id collection, for faster contain*() calls" output="false">
<cfreturn instance.PageIDCollection />
</cffunction>

<cffunction name="setPageIDCollection" access="private" returntype="void" default="void" hint="Mutator for internal id collection, for faster contain*() calls" output="false">
<cfargument name="collection" type="struct" required="true" hint="the key for the id to be stored under">
<cfset instance.PageIDCollection = arguments.collection />
</cffunction>

<cffunction name="getPage" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns the page.Page object at the given index in the array" output="false">
<cfargument name="index" type="numeric" required="true" hint="The index in the array to retrieve">
<cfscript>
if(NOT getPageisLoaded())
{
loadPage();
}
return getPageCollection().get(JavaCast("int", arguments.index - 1));
</cfscript>
</cffunction>

<cffunction name="getPageArray" access="public" returntype="array" default="array" hint="returns the entire array of page.Page" output="false">
<cfscript>
var array = ArrayNew(1);
if(NOT getPageisLoaded())
{
loadPage();
}
array.addAll(getPageCollection());
return array;
</cfscript>
</cffunction>

<cffunction name="getPageIterator" access="public" returntype="any" default="any" hint="return a java.util.Iterator of page.Page objects" output="false">
<cfscript>
if(NOT getPageisLoaded())
{
loadPage();
}
return getPageArray().iterator();
</cfscript>
</cffunction>

<cffunction name="containsPage" access="public" returntype="boolean" default="boolean" hint="If this array contains a particular instance of page.Page" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to look for">
<cfargument name="pkCheckOnly" type="boolean" required="false" hint="Expert/Transfer use only: only checks primary keys" default="false">
<cfscript>
var composite = 0;
var array = getPageArray();
var counter = 1;
var len = 0;
var check = false;
var idcollection = getPageidCollection();
if(arguments.object.getClassName() neq "page.Page")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'page.Page'");
}
if(arguments.object.getIsPersisted() AND StructKeyExists(idcollection, "pk:" & arguments.object.getIDPage()))
{
return true;
}
if(arguments.pkCheckOnly)
{
return false;
}
if(StructKeyExists(idcollection, "obj:" & getSystem().identityHashCode(arguments.object)))
{
check = true;
}
if(NOT check)
{
len = ArrayLen(array);
for(; counter lte len; counter = counter + 1)
{
composite = array[counter];
if(composite.equalsTransfer(arguments.object))
{
check = true;
break;
}
}
}
if(check AND arguments.object.getIsPersisted())
{
StructInsert(idcollection, "pk:" & arguments.object.getIDPage(), 1, true);
}
return check;
</cfscript>
</cffunction>

<cffunction name="findPage" access="public" returntype="numeric" default="numeric" hint="Find the index number that the given object is at in the Array. Returns -1 if it can't be found.'" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to search for">
<cfscript>
var iterator = 0;
var composite = 0;
var counter = 0;
if(NOT getPageisLoaded())
{
loadPage();
}
iterator = getPageCollection().iterator();
if(arguments.object.getClassName() neq "page.Page")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'page.Page'");
}
while(iterator.hasNext())
{
composite = iterator.next();
counter = counter + 1;
if(composite.equalsTransfer(arguments.object))
{
return counter;
}
}
return -1;
</cfscript>
</cffunction>

<cffunction name="emptyPage" access="public" returntype="void" default="void" hint="empty the collection, with no change to loading'" output="false">
<cfscript>
ArrayClear(getPageCollection());
StructClear(getPageIDCollection());
</cfscript>
</cffunction>

<cffunction name="addPage" access="package" returntype="void" default="void" hint="Add an object of type page.Page to the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to add">
<cflock name="transfer.user.User.Page.#getIDUser()#" timeout="60">
<cfscript>
if(arguments.object.getClassName() neq "page.Page")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'page.Page'");
}
if(NOT getPageisLoaded())
{
loadPage();
}
if(arguments.object.getIsPersisted())
{
StructInsert(getPageIDCollection(), "pk:" & arguments.object.getIDPage(), 1, true);
}
StructInsert(getPageIDCollection(), "obj:" & getSystem().identityHashCode(arguments.object), 1, true);
ArrayAppend(getPageCollection(), arguments.object);
</cfscript>
</cflock>
</cffunction>

<cffunction name="removePage" access="package" returntype="void" default="void" hint="remove an object of type page.Page from the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="the object to remove">
<cfscript>
var iterator = 0;
var composite = 0;
if(arguments.object.getClassName() neq "page.Page")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'page.Page'");
}
</cfscript>
<cflock name="transfer.user.User.Page.#getIDUser()#" timeout="60">
<cfscript>
if(NOT getPageisLoaded())
{
loadPage();
}
iterator = getPageCollection().iterator();
while(iterator.hasNext())
{
composite = iterator.next();
if(composite.equalsTransfer(arguments.object))
{
iterator.remove();
if(arguments.object.getIsPersisted())
{
StructDelete(getPageIDCollection(), "pk:" & arguments.object.getIDPage());
}
StructDelete(getPageIDCollection(), "obj:" & getSystem().identityHashCode(arguments.object));
return;
}
}
</cfscript>
</cflock>
</cffunction>

<cffunction name="clearPage" access="package" returntype="void" default="void" hint="Clear all the elements from the array" output="false">
<cflock name="transfer.user.User.Page.#getIDUser()#" timeout="60">
<cfscript>
emptyPage();
</cfscript>
</cflock>
</cffunction>

<cffunction name="sortPage" access="public" returntype="void" default="void" hint="Sort all elements in the array Page" output="false">
<cflock name="transfer.user.User.Page.#getIDUser()#" timeout="60">
<cfscript>
if(NOT arrayisEmpty(getPageCollection()))
{
setPageCollection(getUtility().quickSort(getPageCollection(), PageComparator));
}
</cfscript>
</cflock>
</cffunction>

<cffunction name="PageComparator" access="private" returntype="numeric" default="numeric" hint="The Comparator HOF for sorting" output="false">
<cfargument name="object1" type="transfer.com.TransferObject" required="true" hint="object one">
<cfargument name="object2" type="transfer.com.TransferObject" required="true" hint="object two">
<cfscript>
if(arguments.object1.getCreateDate() lt arguments.object2.getCreateDate())
{
return -1;
}
else if(arguments.object1.getCreateDate() gt arguments.object2.getCreateDate())
{
return 1;
}
return 0;
</cfscript>
</cffunction>

<cffunction name="getMediaCollection" access="private" returntype="array" default="array" hint="Accessor for the internal collection for Media" output="false">
<cfscript>
return instance.Media;
</cfscript>
</cffunction>

<cffunction name="setMediaCollection" access="private" returntype="void" default="void" hint="Mutator for the internal collection for Media" output="false">
<cfargument name="Media" type="array" required="true" hint="The array to set">
<cfscript>
instance.Media = arguments.Media;
</cfscript>
</cffunction>

<cffunction name="getMediaIDCollection" access="private" returntype="struct" default="struct" hint="Accessor for internal id collection, for faster contain*() calls" output="false">
<cfreturn instance.MediaIDCollection />
</cffunction>

<cffunction name="setMediaIDCollection" access="private" returntype="void" default="void" hint="Mutator for internal id collection, for faster contain*() calls" output="false">
<cfargument name="collection" type="struct" required="true" hint="the key for the id to be stored under">
<cfset instance.MediaIDCollection = arguments.collection />
</cffunction>

<cffunction name="getMedia" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns the media.Media object at the given index in the array" output="false">
<cfargument name="index" type="numeric" required="true" hint="The index in the array to retrieve">
<cfscript>
if(NOT getMediaisLoaded())
{
loadMedia();
}
return getMediaCollection().get(JavaCast("int", arguments.index - 1));
</cfscript>
</cffunction>

<cffunction name="getMediaArray" access="public" returntype="array" default="array" hint="returns the entire array of media.Media" output="false">
<cfscript>
var array = ArrayNew(1);
if(NOT getMediaisLoaded())
{
loadMedia();
}
array.addAll(getMediaCollection());
return array;
</cfscript>
</cffunction>

<cffunction name="getMediaIterator" access="public" returntype="any" default="any" hint="return a java.util.Iterator of media.Media objects" output="false">
<cfscript>
if(NOT getMediaisLoaded())
{
loadMedia();
}
return getMediaArray().iterator();
</cfscript>
</cffunction>

<cffunction name="containsMedia" access="public" returntype="boolean" default="boolean" hint="If this array contains a particular instance of media.Media" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to look for">
<cfargument name="pkCheckOnly" type="boolean" required="false" hint="Expert/Transfer use only: only checks primary keys" default="false">
<cfscript>
var composite = 0;
var array = getMediaArray();
var counter = 1;
var len = 0;
var check = false;
var idcollection = getMediaidCollection();
if(arguments.object.getClassName() neq "media.Media")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'media.Media'");
}
if(arguments.object.getIsPersisted() AND StructKeyExists(idcollection, "pk:" & arguments.object.getIDMedia()))
{
return true;
}
if(arguments.pkCheckOnly)
{
return false;
}
if(StructKeyExists(idcollection, "obj:" & getSystem().identityHashCode(arguments.object)))
{
check = true;
}
if(NOT check)
{
len = ArrayLen(array);
for(; counter lte len; counter = counter + 1)
{
composite = array[counter];
if(composite.equalsTransfer(arguments.object))
{
check = true;
break;
}
}
}
if(check AND arguments.object.getIsPersisted())
{
StructInsert(idcollection, "pk:" & arguments.object.getIDMedia(), 1, true);
}
return check;
</cfscript>
</cffunction>

<cffunction name="findMedia" access="public" returntype="numeric" default="numeric" hint="Find the index number that the given object is at in the Array. Returns -1 if it can't be found.'" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to search for">
<cfscript>
var iterator = 0;
var composite = 0;
var counter = 0;
if(NOT getMediaisLoaded())
{
loadMedia();
}
iterator = getMediaCollection().iterator();
if(arguments.object.getClassName() neq "media.Media")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'media.Media'");
}
while(iterator.hasNext())
{
composite = iterator.next();
counter = counter + 1;
if(composite.equalsTransfer(arguments.object))
{
return counter;
}
}
return -1;
</cfscript>
</cffunction>

<cffunction name="emptyMedia" access="public" returntype="void" default="void" hint="empty the collection, with no change to loading'" output="false">
<cfscript>
ArrayClear(getMediaCollection());
StructClear(getMediaIDCollection());
</cfscript>
</cffunction>

<cffunction name="addMedia" access="package" returntype="void" default="void" hint="Add an object of type media.Media to the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to add">
<cflock name="transfer.user.User.Media.#getIDUser()#" timeout="60">
<cfscript>
if(arguments.object.getClassName() neq "media.Media")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'media.Media'");
}
if(NOT getMediaisLoaded())
{
loadMedia();
}
if(arguments.object.getIsPersisted())
{
StructInsert(getMediaIDCollection(), "pk:" & arguments.object.getIDMedia(), 1, true);
}
StructInsert(getMediaIDCollection(), "obj:" & getSystem().identityHashCode(arguments.object), 1, true);
ArrayAppend(getMediaCollection(), arguments.object);
</cfscript>
</cflock>
</cffunction>

<cffunction name="removeMedia" access="package" returntype="void" default="void" hint="remove an object of type media.Media from the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="the object to remove">
<cfscript>
var iterator = 0;
var composite = 0;
if(arguments.object.getClassName() neq "media.Media")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'media.Media'");
}
</cfscript>
<cflock name="transfer.user.User.Media.#getIDUser()#" timeout="60">
<cfscript>
if(NOT getMediaisLoaded())
{
loadMedia();
}
iterator = getMediaCollection().iterator();
while(iterator.hasNext())
{
composite = iterator.next();
if(composite.equalsTransfer(arguments.object))
{
iterator.remove();
if(arguments.object.getIsPersisted())
{
StructDelete(getMediaIDCollection(), "pk:" & arguments.object.getIDMedia());
}
StructDelete(getMediaIDCollection(), "obj:" & getSystem().identityHashCode(arguments.object));
return;
}
}
</cfscript>
</cflock>
</cffunction>

<cffunction name="clearMedia" access="package" returntype="void" default="void" hint="Clear all the elements from the array" output="false">
<cflock name="transfer.user.User.Media.#getIDUser()#" timeout="60">
<cfscript>
emptyMedia();
</cfscript>
</cflock>
</cffunction>

<cffunction name="sortMedia" access="public" returntype="void" default="void" hint="Sort all elements in the array Media" output="false">
<cflock name="transfer.user.User.Media.#getIDUser()#" timeout="60">
<cfscript>
if(NOT arrayisEmpty(getMediaCollection()))
{
setMediaCollection(getUtility().quickSort(getMediaCollection(), MediaComparator));
}
</cfscript>
</cflock>
</cffunction>

<cffunction name="MediaComparator" access="private" returntype="numeric" default="numeric" hint="The Comparator HOF for sorting" output="false">
<cfargument name="object1" type="transfer.com.TransferObject" required="true" hint="object one">
<cfargument name="object2" type="transfer.com.TransferObject" required="true" hint="object two">
<cfscript>
if(arguments.object1.getCreateDate() lt arguments.object2.getCreateDate())
{
return -1;
}
else if(arguments.object1.getCreateDate() gt arguments.object2.getCreateDate())
{
return 1;
}
return 0;
</cfscript>
</cffunction>

<cffunction name="validateCacheState" access="package" returntype="boolean" default="boolean" hint="if this object is cached, then validate that all it's composites are cached too" output="false">
<cfscript>
var iterator = 0;
var item = 0;
if(getIsPersisted() AND NOT getTransfer().validateIsCached(getThisObject()))
{
return true;
}
return true;
</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when creates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "page.Page")
{
if(arguments.event.getTransferObject().hasParentUser())
{
if(arguments.event.getTransferObject().getParentUser().equalsTransfer(getThisObject()))
{
if(NOT containsPage(arguments.event.getTransferObject()))
{
arguments.event.getTransferObject().setParentUser(getThisObject());
}
sortPage();
}
}
}
else if(className eq "media.Media")
{
if(arguments.event.getTransferObject().hasParentUser())
{
if(arguments.event.getTransferObject().getParentUser().equalsTransfer(getThisObject()))
{
if(NOT containsMedia(arguments.event.getTransferObject()))
{
arguments.event.getTransferObject().setParentUser(getThisObject());
}
sortMedia();
}
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when deletes occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "page.Page")
{
if(getPageIsLoaded() AND containsPage(arguments.event.getTransferObject()))
{
removePage(arguments.event.getTransferObject());
}
}
else if(className eq "media.Media")
{
if(getMediaIsLoaded() AND containsMedia(arguments.event.getTransferObject()))
{
removeMedia(arguments.event.getTransferObject());
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="Observer method action for when updates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "page.Page")
{
if(arguments.event.getTransferObject().hasParentUser())
{
if(arguments.event.getTransferObject().getParentUser().equalsTransfer(getThisObject()))
{
if(NOT containsPage(arguments.event.getTransferObject()))
{
arguments.event.getTransferObject().setParentUser(getThisObject());
}
sortPage();
}
}
}
else if(className eq "media.Media")
{
if(arguments.event.getTransferObject().hasParentUser())
{
if(arguments.event.getTransferObject().getParentUser().equalsTransfer(getThisObject()))
{
if(NOT containsMedia(arguments.event.getTransferObject()))
{
arguments.event.getTransferObject().setParentUser(getThisObject());
}
sortMedia();
}
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDiscardTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when discards occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var discard = false;
var className = arguments.event.getTransferObject().getClassName();
if(className eq "page.Page")
{
if(arguments.event.getTransferObject().getOriginalTransferObject().getParentUserisLoaded() AND arguments.event.getTransferObject().hasParentUser()AND arguments.event.getTransferObject().getParentUser().equalsTransfer(getThisObject()))
{
if(getPageisLoaded() AND containsPage(arguments.event.getTransferObject()))
{
if(getPageisLoaded())
{
unloadPage();
}
}
}
}
else if(className eq "media.Media")
{
if(arguments.event.getTransferObject().getOriginalTransferObject().getParentUserisLoaded() AND arguments.event.getTransferObject().hasParentUser()AND arguments.event.getTransferObject().getParentUser().equalsTransfer(getThisObject()))
{
if(getMediaisLoaded() AND containsMedia(arguments.event.getTransferObject()))
{
if(getMediaisLoaded())
{
unloadMedia();
}
}
}
}
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>



<cffunction name="init" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Constructor for Transfer class page.Page" output="false">
<cfargument name="transfer" type="transfer.com.Transfer" required="true" hint="The Transfer library">
<cfargument name="utility" type="transfer.com.util.Utility" required="true" hint="The Utility object">
<cfargument name="nullable" type="transfer.com.sql.Nullable" required="true" hint="The Nullable lookup object">
<cfargument name="thisObject" type="transfer.com.TransferObject" required="true" hint="What is determined to be the base 'this' object for this TransferObject">
<cfscript>
instance = StructNew();
setThisObject(arguments.thisObject);
setTransfer(arguments.transfer);
setUtility(arguments.utility);
setSystem(createObject("java", "java.lang.System"));
setNullable(arguments.nullable);
setClassName("page.Page");
setIsDirty(true);
setIsPersisted(false);
setIsClone(false);
setIDPage(getNullable().getNullNumeric(getClassName(), "IDPage"));
setCreateDate(Now());
setLoaded(StructNew());
setGalleryisLoaded(true);
setParentUserisLoaded(true);
setGalleryCollection(ArrayNew(1));
setGalleryIDCollection(StructNew());
if(StructKeyExists(this, "configure") OR StructKeyExists(variables, "configure"))
{
configure();
}
return this;
</cfscript>
</cffunction>

<cffunction name="equalsTransfer" access="public" returntype="boolean" default="boolean" hint="If an object is persisted, returns true if they are of the same class and same id. If not, returns true if they are the same object." output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The TransferObject to test against">
<cfscript>
if(getIsPersisted())
{
if(getClassName() neq arguments.transfer.getClassName())
{
return false;
}
return (getIDPage() eq arguments.transfer.getIDPage());
}
else
{
return sameTransfer(arguments.transfer);
}
</cfscript>
</cffunction>

<cffunction name="getIDPage" access="public" returntype="numeric" default="numeric" hint="Accessor for property IDPage" output="false">
<cfscript>
return instance.IDPage;
</cfscript>
</cffunction>

<cffunction name="setIDPage" access="public" returntype="void" default="void" hint="Mutator for property IDPage" output="false">
<cfargument name="IDPage" type="numeric" required="true" hint="The value to set IDPage to">
<cfscript>
if(NOT StructKeyExists(instance, "IDPage") OR getIDPage() neq arguments.IDPage)
{
instance.IDPage = getUtility().trimZero(arguments.IDPage);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getCreateDate" access="public" returntype="date" default="date" hint="Accessor for property CreateDate" output="false">
<cfscript>
return instance.CreateDate;
</cfscript>
</cffunction>

<cffunction name="setCreateDate" access="public" returntype="void" default="void" hint="Mutator for property CreateDate" output="false">
<cfargument name="CreateDate" type="date" required="true" hint="The value to set CreateDate to">
<cfscript>
if(NOT StructKeyExists(instance, "CreateDate") OR getCreateDate() neq arguments.CreateDate)
{
instance.CreateDate = (arguments.CreateDate);
setIsDirty(true);
}
</cfscript>
</cffunction>

<cffunction name="getGalleryisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'Gallery' has been loaded yet" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "Gallery"))
{
setGalleryisLoaded(false);
}
return StructFind(getLoaded(), "Gallery");
</cfscript>
</cffunction>

<cffunction name="setGalleryisLoaded" access="private" returntype="void" default="void" hint="Set the loaded state of composition 'arguments.name'" output="false">
<cfargument name="loaded" type="boolean" required="true" hint="Whether or not this composition has been loaded">
<cfscript>
StructInsert(getLoaded(), "Gallery", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadGallery" access="package" returntype="void" default="void" hint="Lazy load composition 'Gallery'" output="false">
<cfif NOT getGalleryisLoaded()>
<cflock name="transfer.load.page.Page.Gallery.#getSystem().identityHashCode(this)#" timeout="60">
<cfif NOT getGalleryisLoaded()>
<cfscript>
getTransfer().loadOneToMany(getThisObject(), "Gallery");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="unLoadGallery" access="private" returntype="void" default="void" hint="unload lazy load composition 'Gallery'" output="false">
<cfif getGalleryisLoaded()>
<cflock name="transfer.load.page.Page.Gallery.#getSystem().identityHashCode(this)#" timeout="60">
<cfif getGalleryisLoaded()>
<cfscript>
setGalleryisLoaded(false);
emptyGallery();
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="getParentUserisLoaded" access="public" returntype="boolean" default="boolean" hint="Whether or not the composition 'ParentUser' has been loaded yet" output="false">
<cfscript>
if(NOT StructKeyExists(getLoaded(), "ParentUser"))
{
setParentUserisLoaded(false);
}
return StructFind(getLoaded(), "ParentUser");
</cfscript>
</cffunction>

<cffunction name="setParentUserisLoaded" access="private" returntype="void" default="void" hint="Set the loaded state of composition 'arguments.name'" output="false">
<cfargument name="loaded" type="boolean" required="true" hint="Whether or not this composition has been loaded">
<cfscript>
StructInsert(getLoaded(), "ParentUser", arguments.loaded, true);
</cfscript>
</cffunction>

<cffunction name="loadParentUser" access="package" returntype="void" default="void" hint="Lazy load composition 'ParentUser'" output="false">
<cfif NOT getParentUserisLoaded()>
<cflock name="transfer.load.page.Page.ParentUser.#getSystem().identityHashCode(this)#" timeout="60">
<cfif NOT getParentUserisLoaded()>
<cfscript>
getTransfer().loadParentOneToMany(getThisObject(), "ParentUser");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="unLoadParentUser" access="private" returntype="void" default="void" hint="unload lazy load composition 'ParentUser'" output="false">
<cfif getParentUserisLoaded()>
<cflock name="transfer.load.page.Page.ParentUser.#getSystem().identityHashCode(this)#" timeout="60">
<cfif getParentUserisLoaded()>
<cfscript>
setParentUserisLoaded(false);
StructDelete(instance, "ParentUser");
</cfscript>
</cfif>
</cflock>
</cfif>
</cffunction>

<cffunction name="setMemento" access="public" returntype="void" default="void" hint="set the state of this object from a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
var composite = 0;
if(NOT getIsPersisted())
{
setIDPage(StructFind(arguments.memento, "IDPage"));
}
setPropertyMemento(arguments.memento);
setParentUserisLoaded(false);
setParentUserMemento(memento,false);
setGalleryisLoaded(false);
</cfscript>
</cffunction>

<cffunction name="setPropertyMemento" access="public" returntype="void" default="void" hint="set the Property state of this object with a memento" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfscript>
setCreateDate(StructFind(arguments.memento, "CreateDate"));
</cfscript>
</cffunction>

<cffunction name="setParentUserMemento" access="public" returntype="void" default="void" hint="set the state of composition parent onetomany 'ParentUser'" output="false">
<cfargument name="memento" type="struct" required="true" hint="the memento to set the state with">
<cfargument name="retrieveParent" type="boolean" required="false" hint="Whether or not to force retrieval of the parent" default="true">
<cfscript>
var composite = 0;
if(StructKeyExists(arguments.memento, "parentUser_transferObject"))
{
setParentUser(StructFind(arguments.memento, "parentUser_transferObject"), false, true);
}
else if(arguments.retrieveParent)
{
if(StructKeyExists(arguments.memento, "parentUser_IDUser"))
{
composite = getTransfer().get("user.User", StructFind(arguments.memento, "parentUser_IDUser"));
if(getIsClone() AND composite.getIsPersisted())
{
composite = composite.clone();
}
setParentUserisLoaded(true);
if(composite.getIsPersisted())
{
setParentUser(composite, false, true);
}
else
{
removeParentUser();
}
}
else
{
removeParentUser();
}
}
</cfscript>
</cffunction>

<cffunction name="setGalleryMemento" access="public" returntype="void" default="void" hint="set the state of composition onetomany 'Gallery'" output="false">
<cfargument name="memento" type="array" required="true" hint="the memento to set the state with">
<cfscript>
var isDirty = false;
var iterator = 0;
var collection = ArrayNew(1);
var idcollection = StructNew();
var counter = 0;
var len = 0;
var item = 0;
var composite = 0;
</cfscript>
<cflock name="transfer.page.Page.Gallery.#getIDPage()#" timeout="60">
<cfscript>
len = ArrayLen(arguments.memento);
for(counter = 1; counter lte len; counter = counter + 1)
{
composite = arguments.memento[counter];
StructInsert(composite, "parentPage_transferObject", getThisObject(), true);
item = getComposite("gallery.Gallery", composite, "IDGallery");
StructInsert(idcollection, "pk:" & item.getIDGallery(), 1, true);
StructInsert(idcollection, "obj:" & getSystem().identityHashCode(item), 1, true);
arrayAppend(collection, item);
}
setGalleryIDCollection(idcollection);
setGalleryCollection(collection);
iterator = collection.iterator();
while(iterator.hasNext())
{
item = iterator.next();
isDirty = item.getIsDirty();
if(item.getIsLoaded())
{
item.setParentPage(getThisObject(), false, true);
}
if(NOT isDirty)
{
item.getOriginalTransferObject(true).setIsDirty(StructFind(composite, "transfer_isDirty"));
item.getOriginalTransferObject(true).setIsPersisted(StructFind(composite, "transfer_isPersisted"));
}
}
setGalleryisLoaded(true);
</cfscript>
</cflock>
</cffunction>

<cffunction name="getMemento" access="public" returntype="struct" default="struct" hint="Returns the memento for all non-lazy members of this object" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
StructInsert(memento, "IDPage", getIDPage());
StructInsert(memento, "transfer_isDirty", getIsDirty());
StructInsert(memento, "transfer_isPersisted", getIsPersisted());
StructInsert(memento, "transfer_isProxied", false);
StructAppend(memento, getPropertyMemento());
return memento;
</cfscript>
</cffunction>

<cffunction name="getPropertyMemento" access="public" returntype="struct" default="struct" hint="returns the memento for properties" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
StructInsert(memento, "CreateDate", getCreateDate());
return memento;
</cfscript>
</cffunction>

<cffunction name="getParentUserMemento" access="public" returntype="struct" default="struct" hint="returns the memento for the parent onetomany user.User" output="false">
<cfscript>
var memento = createObject("java", "java.util.HashMap").init();
if(hasParentUser())
{
StructInsert(memento, "parentUser_IDUser", getParentUser().getIDUser());
}
return memento;
</cfscript>
</cffunction>

<cffunction name="getGalleryMemento" access="public" returntype="array" default="array" hint="returns the memento for the onetomany Gallery" output="false">
<cfscript>
var memento = createObject("java", "java.util.ArrayList").init();
var iterator = getGalleryIterator();
var item = 0;
while(iterator.hasNext())
{
item = iterator.next();
ArrayAppend(memento, item.getMemento());
}
return memento;
</cfscript>
</cffunction>

<cffunction name="copyValuesTo" access="public" returntype="void" default="void" hint="Copies the values of this object to one of the same class" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="The object to copy values to">
<cfscript>
if(arguments.transfer.getClassName() neq "page.Page")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'page.Page'");
}
arguments.transfer.setMemento(getMemento());
if(getGalleryisLoaded())
{
arguments.transfer.setGalleryMemento(getGalleryMemento());
}
if(getParentUserisLoaded() AND getIsDirty())
{
arguments.transfer.setParentUserMemento(getParentUserMemento(), true);
}
</cfscript>
</cffunction>

<cffunction name="getGalleryCollection" access="private" returntype="array" default="array" hint="Accessor for the internal collection for Gallery" output="false">
<cfscript>
return instance.Gallery;
</cfscript>
</cffunction>

<cffunction name="setGalleryCollection" access="private" returntype="void" default="void" hint="Mutator for the internal collection for Gallery" output="false">
<cfargument name="Gallery" type="array" required="true" hint="The array to set">
<cfscript>
instance.Gallery = arguments.Gallery;
</cfscript>
</cffunction>

<cffunction name="getGalleryIDCollection" access="private" returntype="struct" default="struct" hint="Accessor for internal id collection, for faster contain*() calls" output="false">
<cfreturn instance.GalleryIDCollection />
</cffunction>

<cffunction name="setGalleryIDCollection" access="private" returntype="void" default="void" hint="Mutator for internal id collection, for faster contain*() calls" output="false">
<cfargument name="collection" type="struct" required="true" hint="the key for the id to be stored under">
<cfset instance.GalleryIDCollection = arguments.collection />
</cffunction>

<cffunction name="getGallery" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Returns the gallery.Gallery object at the given index in the array" output="false">
<cfargument name="index" type="numeric" required="true" hint="The index in the array to retrieve">
<cfscript>
if(NOT getGalleryisLoaded())
{
loadGallery();
}
return getGalleryCollection().get(JavaCast("int", arguments.index - 1));
</cfscript>
</cffunction>

<cffunction name="getGalleryArray" access="public" returntype="array" default="array" hint="returns the entire array of gallery.Gallery" output="false">
<cfscript>
var array = ArrayNew(1);
if(NOT getGalleryisLoaded())
{
loadGallery();
}
array.addAll(getGalleryCollection());
return array;
</cfscript>
</cffunction>

<cffunction name="getGalleryIterator" access="public" returntype="any" default="any" hint="return a java.util.Iterator of gallery.Gallery objects" output="false">
<cfscript>
if(NOT getGalleryisLoaded())
{
loadGallery();
}
return getGalleryArray().iterator();
</cfscript>
</cffunction>

<cffunction name="containsGallery" access="public" returntype="boolean" default="boolean" hint="If this array contains a particular instance of gallery.Gallery" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to look for">
<cfargument name="pkCheckOnly" type="boolean" required="false" hint="Expert/Transfer use only: only checks primary keys" default="false">
<cfscript>
var composite = 0;
var array = getGalleryArray();
var counter = 1;
var len = 0;
var check = false;
var idcollection = getGalleryidCollection();
if(arguments.object.getClassName() neq "gallery.Gallery")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'gallery.Gallery'");
}
if(arguments.object.getIsPersisted() AND StructKeyExists(idcollection, "pk:" & arguments.object.getIDGallery()))
{
return true;
}
if(arguments.pkCheckOnly)
{
return false;
}
if(StructKeyExists(idcollection, "obj:" & getSystem().identityHashCode(arguments.object)))
{
check = true;
}
if(NOT check)
{
len = ArrayLen(array);
for(; counter lte len; counter = counter + 1)
{
composite = array[counter];
if(composite.equalsTransfer(arguments.object))
{
check = true;
break;
}
}
}
if(check AND arguments.object.getIsPersisted())
{
StructInsert(idcollection, "pk:" & arguments.object.getIDGallery(), 1, true);
}
return check;
</cfscript>
</cffunction>

<cffunction name="findGallery" access="public" returntype="numeric" default="numeric" hint="Find the index number that the given object is at in the Array. Returns -1 if it can't be found.'" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to search for">
<cfscript>
var iterator = 0;
var composite = 0;
var counter = 0;
if(NOT getGalleryisLoaded())
{
loadGallery();
}
iterator = getGalleryCollection().iterator();
if(arguments.object.getClassName() neq "gallery.Gallery")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'gallery.Gallery'");
}
while(iterator.hasNext())
{
composite = iterator.next();
counter = counter + 1;
if(composite.equalsTransfer(arguments.object))
{
return counter;
}
}
return -1;
</cfscript>
</cffunction>

<cffunction name="emptyGallery" access="public" returntype="void" default="void" hint="empty the collection, with no change to loading'" output="false">
<cfscript>
ArrayClear(getGalleryCollection());
StructClear(getGalleryIDCollection());
</cfscript>
</cffunction>

<cffunction name="addGallery" access="package" returntype="void" default="void" hint="Add an object of type gallery.Gallery to the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="The object to add">
<cflock name="transfer.page.Page.Gallery.#getIDPage()#" timeout="60">
<cfscript>
if(arguments.object.getClassName() neq "gallery.Gallery")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'gallery.Gallery'");
}
if(NOT getGalleryisLoaded())
{
loadGallery();
}
if(arguments.object.getIsPersisted())
{
StructInsert(getGalleryIDCollection(), "pk:" & arguments.object.getIDGallery(), 1, true);
}
StructInsert(getGalleryIDCollection(), "obj:" & getSystem().identityHashCode(arguments.object), 1, true);
ArrayAppend(getGalleryCollection(), arguments.object);
</cfscript>
</cflock>
</cffunction>

<cffunction name="removeGallery" access="package" returntype="void" default="void" hint="remove an object of type gallery.Gallery from the array" output="false">
<cfargument name="object" type="transfer.com.TransferObject" required="true" hint="the object to remove">
<cfscript>
var iterator = 0;
var composite = 0;
if(arguments.object.getClassName() neq "gallery.Gallery")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.object.getClassName()#' does not match the expected class of 'gallery.Gallery'");
}
</cfscript>
<cflock name="transfer.page.Page.Gallery.#getIDPage()#" timeout="60">
<cfscript>
if(NOT getGalleryisLoaded())
{
loadGallery();
}
iterator = getGalleryCollection().iterator();
while(iterator.hasNext())
{
composite = iterator.next();
if(composite.equalsTransfer(arguments.object))
{
iterator.remove();
if(arguments.object.getIsPersisted())
{
StructDelete(getGalleryIDCollection(), "pk:" & arguments.object.getIDGallery());
}
StructDelete(getGalleryIDCollection(), "obj:" & getSystem().identityHashCode(arguments.object));
return;
}
}
</cfscript>
</cflock>
</cffunction>

<cffunction name="clearGallery" access="package" returntype="void" default="void" hint="Clear all the elements from the array" output="false">
<cflock name="transfer.page.Page.Gallery.#getIDPage()#" timeout="60">
<cfscript>
emptyGallery();
</cfscript>
</cflock>
</cffunction>

<cffunction name="sortGallery" access="public" returntype="void" default="void" hint="Sort all elements in the array Gallery" output="false">
<cflock name="transfer.page.Page.Gallery.#getIDPage()#" timeout="60">
<cfscript>
if(NOT arrayisEmpty(getGalleryCollection()))
{
setGalleryCollection(getUtility().quickSort(getGalleryCollection(), GalleryComparator));
}
</cfscript>
</cflock>
</cffunction>

<cffunction name="GalleryComparator" access="private" returntype="numeric" default="numeric" hint="The Comparator HOF for sorting" output="false">
<cfargument name="object1" type="transfer.com.TransferObject" required="true" hint="object one">
<cfargument name="object2" type="transfer.com.TransferObject" required="true" hint="object two">
<cfscript>
if(arguments.object1.getName() lt arguments.object2.getName())
{
return -1;
}
else if(arguments.object1.getName() gt arguments.object2.getName())
{
return 1;
}
return 0;
</cfscript>
</cffunction>

<cffunction name="getParentUser" access="public" returntype="transfer.com.TransferObject" default="transfer.com.TransferObject" hint="Access for parent page.Page" output="false">
<cfscript>
if(NOT getParentUserisLoaded())
{
loadParentUser();
}
if(NOT structKeyExists(instance, "User"))
{
throw("OneToManyParentNotSetException","A OneToMany Parent TransferObject has not been initialised.","In TransferObject 'page.Page' onetomany parent 'user.User' does not exist, when calling getParentUser()");
}
return instance.User;
</cfscript>
</cffunction>

<cffunction name="setParentUser" access="public" returntype="void" default="void" hint="Mutator for parent page.Page" output="false">
<cfargument name="transfer" type="transfer.com.TransferObject" required="true" hint="the object to set as parent">
<cfargument name="loadChildren" type="boolean" required="false" hint="Expert/Transfer use only: whether or not to load the children." default="true">
<cfargument name="loadingFromMemento" type="boolean" required="false" hint="Expert/Transfer use only: if this is loading from a memento or not" default="false">
<cfscript>
if(arguments.transfer.getClassName() neq "user.User")
{
throw("InvalidTransferClassException","The supplied Transfer class was not the one specified in the configuration file ","The Transfer class of '#arguments.transfer.getClassName()#' does not match the expected class of 'user.User'");
}
if(NOT getParentUserIsLoaded() OR NOT hasParentUser() OR NOT getParentUser().equalsTransfer(arguments.transfer))
{
if(getParentUserIsLoaded() AND hasParentUser())
{
removeParentUser();
}
instance.User = arguments.transfer;
setParentUserisLoaded(true);
setIsDirty(true);
}
else if(NOT getParentUser().sameTransfer(arguments.transfer))
{
instance.User = arguments.transfer;
}
if(arguments.loadChildren AND NOT getParentUser().getOriginalTransferObject().getPageIsLoaded())
{
getParentUser().getOriginalTransferObject().loadPage();
}
if(getParentUser().getOriginalTransferObject().getPageIsLoaded()AND NOT getParentUser().getOriginalTransferObject().containsPage(getThisObject(), arguments.loadingFromMemento))
{
getParentUser().getOriginalTransferObject().addPage(getThisObject());
}
</cfscript>
</cffunction>

<cffunction name="hasParentUser" access="public" returntype="boolean" default="boolean" hint="Whether or not this object has a parent page.Page" output="false">
<cfscript>
if(NOT getParentUserisLoaded())
{
loadParentUser();
}
return StructKeyExists(instance,"User");
</cfscript>
</cffunction>

<cffunction name="removeParentUser" access="public" returntype="void" default="void" hint="Remove the parent page.Page from this object" output="false">
<cfscript>
if(getParentUserisLoaded() AND hasParentUser())
{
getParentUser().getOriginalTransferObject().removePage(getThisObject());
}
else if(StructKeyExists(instance, "User"))
{
instance.User.getOriginalTransferObject().removePage(getThisObject());
}
setIsDirty(true);
StructDelete(instance,"User");
setParentUserisLoaded(true);
</cfscript>
</cffunction>

<cffunction name="validateCacheState" access="package" returntype="boolean" default="boolean" hint="if this object is cached, then validate that all it's composites are cached too" output="false">
<cfscript>
var iterator = 0;
var item = 0;
if(getIsPersisted() AND NOT getTransfer().validateIsCached(getThisObject()))
{
if(getParentUserisLoaded() AND hasParentUser())
{
if(getIsClone() AND getParentUser().getIsClone())
{
return true;
}
return false;
}
return true;
}
if(getParentUserisLoaded() AND hasParentUser())
{
item = getParentUser();
if(item.getIsClone() OR NOT getTransfer().validateIsCached(item))
{
return false;
}
}
return true;
</cfscript>
</cffunction>

<cffunction name="actionAfterCreateTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when creates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "gallery.Gallery")
{
if(arguments.event.getTransferObject().hasParentPage())
{
if(arguments.event.getTransferObject().getParentPage().equalsTransfer(getThisObject()))
{
if(NOT containsGallery(arguments.event.getTransferObject()))
{
arguments.event.getTransferObject().setParentPage(getThisObject());
}
sortGallery();
}
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDeleteTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when deletes occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "user.User")
{
if(hasParentUser() AND arguments.event.getTransferObject().equalsTransfer(getParentUser()))
{
removeParentUser();
}
}
if(className eq "gallery.Gallery")
{
if(getGalleryIsLoaded() AND containsGallery(arguments.event.getTransferObject()))
{
removeGallery(arguments.event.getTransferObject());
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterUpdateTransferEvent" access="public" returntype="void" default="void" hint="Observer method action for when updates occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var className = arguments.event.getTransferObject().getClassName();
if(className eq "gallery.Gallery")
{
if(arguments.event.getTransferObject().hasParentPage())
{
if(arguments.event.getTransferObject().getParentPage().equalsTransfer(getThisObject()))
{
if(NOT containsGallery(arguments.event.getTransferObject()))
{
arguments.event.getTransferObject().setParentPage(getThisObject());
}
sortGallery();
}
}
}
</cfscript>
</cffunction>

<cffunction name="actionAfterDiscardTransferEvent" access="public" returntype="void" default="void" hint="Observer action method for when discards occur" output="false">
<cfargument name="event" type="transfer.com.events.TransferEvent" required="true" hint="The Transfer Event Object">
<cfscript>
var discard = false;
var className = arguments.event.getTransferObject().getClassName();
if(className eq "gallery.Gallery")
{
if(arguments.event.getTransferObject().getOriginalTransferObject().getParentPageisLoaded() AND arguments.event.getTransferObject().hasParentPage()AND arguments.event.getTransferObject().getParentPage().equalsTransfer(getThisObject()))
{
if(getGalleryisLoaded() AND containsGallery(arguments.event.getTransferObject()))
{
if(getGalleryisLoaded())
{
unloadGallery();
}
}
}
}
if(className eq "user.User")
{
if(getParentUserisLoaded() AND hasParentUser() AND arguments.event.getTransferObject().equalsTransfer(getParentUser()))
{
if(getParentUserisLoaded())
{
unloadParentUser();
}
}
}
if(discard)
{
getTransfer().discard(getThisObject());
}
</cfscript>
</cffunction>


